//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace HappyWorkEveryday.TechnologyServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tb_Technology", Namespace="http://schemas.datacontract.org/2004/07/HappyWorkService")]
    public partial class Tb_Technology : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private int TeamIdField;
        
        private string TechnologyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TeamId {
            get {
                return this.TeamIdField;
            }
            set {
                if ((this.TeamIdField.Equals(value) != true)) {
                    this.TeamIdField = value;
                    this.RaisePropertyChanged("TeamId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Technology {
            get {
                return this.TechnologyField;
            }
            set {
                if ((object.ReferenceEquals(this.TechnologyField, value) != true)) {
                    this.TechnologyField = value;
                    this.RaisePropertyChanged("Technology");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TechnologyServiceReference.ITechnologyService")]
    public interface ITechnologyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITechnologyService/Add", ReplyAction="http://tempuri.org/ITechnologyService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(HappyWorkEveryday.TechnologyServiceReference.Tb_Technology t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITechnologyService/Update", ReplyAction="http://tempuri.org/ITechnologyService/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(HappyWorkEveryday.TechnologyServiceReference.Tb_Technology t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITechnologyService/Delete", ReplyAction="http://tempuri.org/ITechnologyService/DeleteResponse")]
        System.Threading.Tasks.Task<int> DeleteAsync(HappyWorkEveryday.TechnologyServiceReference.Tb_Technology t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITechnologyService/Find", ReplyAction="http://tempuri.org/ITechnologyService/FindResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HappyWorkEveryday.TechnologyServiceReference.Tb_Technology))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<HappyWorkEveryday.TechnologyServiceReference.Tb_Technology>))]
        System.Threading.Tasks.Task<HappyWorkEveryday.TechnologyServiceReference.Tb_Technology> FindAsync(object id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITechnologyService/FindAll", ReplyAction="http://tempuri.org/ITechnologyService/FindAllResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<HappyWorkEveryday.TechnologyServiceReference.Tb_Technology>> FindAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITechnologyServiceChannel : HappyWorkEveryday.TechnologyServiceReference.ITechnologyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TechnologyServiceClient : System.ServiceModel.ClientBase<HappyWorkEveryday.TechnologyServiceReference.ITechnologyService>, HappyWorkEveryday.TechnologyServiceReference.ITechnologyService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TechnologyServiceClient() : 
                base(TechnologyServiceClient.GetDefaultBinding(), TechnologyServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ITechnologyService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TechnologyServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(TechnologyServiceClient.GetBindingForEndpoint(endpointConfiguration), TechnologyServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TechnologyServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TechnologyServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TechnologyServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TechnologyServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TechnologyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(HappyWorkEveryday.TechnologyServiceReference.Tb_Technology t) {
            return base.Channel.AddAsync(t);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(HappyWorkEveryday.TechnologyServiceReference.Tb_Technology t) {
            return base.Channel.UpdateAsync(t);
        }
        
        public System.Threading.Tasks.Task<int> DeleteAsync(HappyWorkEveryday.TechnologyServiceReference.Tb_Technology t) {
            return base.Channel.DeleteAsync(t);
        }
        
        public System.Threading.Tasks.Task<HappyWorkEveryday.TechnologyServiceReference.Tb_Technology> FindAsync(object id) {
            return base.Channel.FindAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<HappyWorkEveryday.TechnologyServiceReference.Tb_Technology>> FindAllAsync() {
            return base.Channel.FindAllAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITechnologyService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ITechnologyService)) {
                return new System.ServiceModel.EndpointAddress("http://10.168.172.218:8090/Services/TechnologyService/TechnologyService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return TechnologyServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ITechnologyService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return TechnologyServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ITechnologyService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ITechnologyService,
        }
    }
}
