//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace HappyWorkEveryday.MSDNUserServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tb_MSDNUser", Namespace="http://schemas.datacontract.org/2004/07/HappyWorkService")]
    public partial class Tb_MSDNUser : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AliasField;
        
        private int IdField;
        
        private int IsCheckOutField;
        
        private int IsTraineeField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alias {
            get {
                return this.AliasField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasField, value) != true)) {
                    this.AliasField = value;
                    this.RaisePropertyChanged("Alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IsCheckOut {
            get {
                return this.IsCheckOutField;
            }
            set {
                if ((this.IsCheckOutField.Equals(value) != true)) {
                    this.IsCheckOutField = value;
                    this.RaisePropertyChanged("IsCheckOut");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IsTrainee {
            get {
                return this.IsTraineeField;
            }
            set {
                if ((this.IsTraineeField.Equals(value) != true)) {
                    this.IsTraineeField = value;
                    this.RaisePropertyChanged("IsTrainee");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MSDNUserServiceReference.IMSDNUserService")]
    public interface IMSDNUserService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSDNUserService/Add", ReplyAction="http://tempuri.org/IMSDNUserService/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSDNUserService/Update", ReplyAction="http://tempuri.org/IMSDNUserService/UpdateResponse")]
        System.Threading.Tasks.Task<int> UpdateAsync(HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSDNUserService/Delete", ReplyAction="http://tempuri.org/IMSDNUserService/DeleteResponse")]
        System.Threading.Tasks.Task<int> DeleteAsync(HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser t);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSDNUserService/Find", ReplyAction="http://tempuri.org/IMSDNUserService/FindResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser>))]
        System.Threading.Tasks.Task<HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser> FindAsync(object id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSDNUserService/FindAll", ReplyAction="http://tempuri.org/IMSDNUserService/FindAllResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser>> FindAllAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMSDNUserServiceChannel : HappyWorkEveryday.MSDNUserServiceReference.IMSDNUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MSDNUserServiceClient : System.ServiceModel.ClientBase<HappyWorkEveryday.MSDNUserServiceReference.IMSDNUserService>, HappyWorkEveryday.MSDNUserServiceReference.IMSDNUserService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public MSDNUserServiceClient() : 
                base(MSDNUserServiceClient.GetDefaultBinding(), MSDNUserServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IMSDNUserService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MSDNUserServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(MSDNUserServiceClient.GetBindingForEndpoint(endpointConfiguration), MSDNUserServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MSDNUserServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(MSDNUserServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MSDNUserServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(MSDNUserServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public MSDNUserServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser t) {
            return base.Channel.AddAsync(t);
        }
        
        public System.Threading.Tasks.Task<int> UpdateAsync(HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser t) {
            return base.Channel.UpdateAsync(t);
        }
        
        public System.Threading.Tasks.Task<int> DeleteAsync(HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser t) {
            return base.Channel.DeleteAsync(t);
        }
        
        public System.Threading.Tasks.Task<HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser> FindAsync(object id) {
            return base.Channel.FindAsync(id);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<HappyWorkEveryday.MSDNUserServiceReference.Tb_MSDNUser>> FindAllAsync() {
            return base.Channel.FindAllAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMSDNUserService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IMSDNUserService)) {
                return new System.ServiceModel.EndpointAddress("http://10.168.172.218:8090/Services/MSDNUserService/MSDNUserService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return MSDNUserServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IMSDNUserService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return MSDNUserServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IMSDNUserService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IMSDNUserService,
        }
    }
}
